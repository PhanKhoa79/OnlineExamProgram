'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { HelpCircle, Plus, Edit, Trash2, Download, Upload, AlertCircle, CheckCircle, Search } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useAuthStore } from '@/features/auth/store';
import { hasPermission } from '@/lib/permissions';
import * as Tabs from '@radix-ui/react-tabs';

interface ValidationRule {
  field: string;
  rules: string[];
  examples?: string[];
}

interface FormField {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'select' | 'date' | 'number' | 'textarea' | 'radio' | 'file' | 'treeview' | 'checkbox-list' | 'dynamic-list' | 'url' | 'color' | 'color-picker' | 'color-picker-list' | 'color-picker-list-dynamic' | 'color-picker-list-dynamic-list' | 'color-picker-list-dynamic-list-dynamic-list' | 'color-picker-list-dynamic-list-dynamic-list-dynamic-list';
  required: boolean;
  validation?: ValidationRule;
  options?: string[];
  description?: string;
  placeholder?: string;
}

export interface DetailedInstruction {
  operation: 'create' | 'edit' | 'delete';
  title: string;
  description: string;
  permission?: string;
  formFields?: FormField[];
  steps: string[];
  tips?: string[];
  warnings?: string[];
  additionalNotes?: string[];
}

interface TabbedHelpModalProps {
  featureName: string;
  entityName: string;
  permissions?: {
    create?: string;
    edit?: string;
    delete?: string;
    export?: string;
    import?: string;
  };
  detailedInstructions: DetailedInstruction[];
}

const operationIcons = {
  create: <Plus className="h-5 w-5 text-green-600" />,
  edit: <Edit className="h-5 w-5 text-blue-600" />,
  delete: <Trash2 className="h-5 w-5 text-red-600" />
};

const getFieldTypeIcon = (type: string) => {
  switch (type) {
    case 'email': return 'üìß';
    case 'password': return 'üîí';
    case 'select': return 'üìã';
    case 'radio': return '‚ö™';
    case 'file': return 'üìÅ';
    case 'date': return 'üìÖ';
    case 'number': return 'üî¢';
    case 'textarea': return 'üìù';
    default: return '‚úèÔ∏è';
  }
};

export function TabbedHelpModal({ 
  featureName, 
  entityName, 
  permissions, 
  detailedInstructions 
}: TabbedHelpModalProps) {
  const [open, setOpen] = useState(false);
  
  // Get user's actual permissions from auth store
  const userPermissions = useAuthStore((state) => state.permissions);

  // General instructions (simplified version)
  const getGeneralInstructions = () => {
    const instructions = [];

    // Add Create instruction
    if (!permissions?.create || hasPermission(userPermissions, permissions.create)) {
      instructions.push({
        title: `Th√™m ${entityName}`,
        icon: <Plus className="h-5 w-5 text-green-600" />,
        description: `H∆∞·ªõng d·∫´n c√°ch th√™m ${entityName} m·ªõi`,
        steps: [
          `Nh·∫•n v√†o n√∫t "+ Th√™m ${entityName}" ·ªü g√≥c tr√™n b√™n ph·∫£i`,
          'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√†o form',
          'Ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p',
          'Nh·∫•n "L∆∞u" ho·∫∑c "L∆∞u & Tho√°t" ƒë·ªÉ ho√†n t·∫•t'
        ]
      });
    }

    // Add Edit instruction
    if (!permissions?.edit || hasPermission(userPermissions, permissions.edit)) {
      instructions.push({
        title: `S·ª≠a ${entityName}`,
        icon: <Edit className="h-5 w-5 text-blue-600" />,
        description: `H∆∞·ªõng d·∫´n c√°ch ch·ªânh s·ª≠a ${entityName}`,
        steps: [
          `T√¨m ${entityName} c·∫ßn s·ª≠a trong b·∫£ng`,
          'Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng b√∫t ch√¨ (‚úèÔ∏è) ·ªü c·ªôt "H√†nh ƒë·ªông"',
          'Ch·ªânh s·ª≠a th√¥ng tin c·∫ßn thi·∫øt',
          'Nh·∫•n "L∆∞u" ho·∫∑c "L∆∞u & Tho√°t" ƒë·ªÉ c·∫≠p nh·∫≠t'
        ]
      });
    }

    // Add Delete instruction
    if (!permissions?.delete || hasPermission(userPermissions, permissions.delete)) {
      instructions.push({
        title: `X√≥a ${entityName}`,
        icon: <Trash2 className="h-5 w-5 text-red-600" />,
        description: `H∆∞·ªõng d·∫´n c√°ch x√≥a ${entityName}`,
        steps: [
          `T√¨m ${entityName} c·∫ßn x√≥a trong b·∫£ng`,
          'Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng th√πng r√°c (üóëÔ∏è) ·ªü c·ªôt "H√†nh ƒë·ªông"',
          'X√°c nh·∫≠n vi·ªác x√≥a trong h·ªôp tho·∫°i',
          '‚ö†Ô∏è L∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!'
        ]
      });
    }

    // Always add search and export
    instructions.push(
      {
        title: 'T√¨m ki·∫øm v√† l·ªçc',
        icon: <Search className="h-5 w-5 text-purple-600" />,
        description: 'H∆∞·ªõng d·∫´n c√°ch t√¨m ki·∫øm v√† l·ªçc d·ªØ li·ªáu',
        steps: [
          'S·ª≠ d·ª•ng √¥ t√¨m ki·∫øm ƒë·ªÉ nh·∫≠p t·ª´ kh√≥a',
          'Ch·ªçn b·ªô l·ªçc ph√π h·ª£p (n·∫øu c√≥)',
          'Nh·∫•n "X√≥a b·ªô l·ªçc" ƒë·ªÉ reset t·∫•t c·∫£ filter',
          'S·ª≠ d·ª•ng "C·ªôt" ƒë·ªÉ ·∫©n/hi·ªán c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt'
        ]
      },
      {
        title: 'Xu·∫•t d·ªØ li·ªáu',
        icon: <Download className="h-5 w-5 text-indigo-600" />,
        description: 'H∆∞·ªõng d·∫´n xu·∫•t d·ªØ li·ªáu ra Excel/CSV',
        steps: [
          'Nh·∫•n n√∫t "Xu·∫•t" ƒë·ªÉ t·∫£i d·ªØ li·ªáu v·ªÅ Excel/CSV',
          'Ch·ªçn ƒë·ªãnh d·∫°ng file ph√π h·ª£p (Excel ho·∫∑c CSV)',
          'File s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫£i v·ªÅ m√°y t√≠nh',
          'M·ªü file ƒë·ªÉ xem v√† s·ª≠ d·ª•ng d·ªØ li·ªáu'
        ]
      }
    );

    // Add import if create permission exists
    if (permissions?.create && hasPermission(userPermissions, permissions.create)) {
      instructions.push({
        title: 'Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel/CSV',
        icon: <Upload className="h-5 w-5 text-green-600" />,
        description: 'H∆∞·ªõng d·∫´n nh·∫≠p d·ªØ li·ªáu t·ª´ file Excel ho·∫∑c CSV',
        steps: [
          'Nh·∫•n n√∫t "Nh·∫≠p" v√† ch·ªçn lo·∫°i file (Excel ho·∫∑c CSV)',
          'Ch·ªçn file Excel (.xlsx) ho·∫∑c CSV (.csv) t·ª´ m√°y t√≠nh',
          'Ki·ªÉm tra preview d·ªØ li·ªáu tr∆∞·ªõc khi nh·∫≠p',
          'Nh·∫•n "X√°c nh·∫≠n" ƒë·ªÉ th√™m d·ªØ li·ªáu v√†o h·ªá th·ªëng',
          'üí° L∆∞u √Ω: ƒê·∫£m b·∫£o format file ƒë√∫ng theo m·∫´u'
        ]
      });
    }

    return instructions;
  };

  const filteredDetailedInstructions = detailedInstructions.filter((instruction) => {
    if (!instruction.permission) return true;
    return hasPermission(userPermissions, instruction.permission);
  });

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="flex items-center gap-2 text-gray-600 hover:text-gray-900 border-gray-300 hover:border-gray-400 cursor-pointer"
        >
          <HelpCircle className="h-4 w-4" />
          H∆∞·ªõng d·∫´n
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-7xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold text-gray-900">
            H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng - {featureName}
          </DialogTitle>
          <DialogDescription className="text-gray-600">
            H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch th√™m, s·ª≠a, x√≥a v√† qu·∫£n l√Ω {entityName.toLowerCase()}
          </DialogDescription>
        </DialogHeader>
        
        <Tabs.Root defaultValue="general" className="w-full">
          <Tabs.List className="flex space-x-4 border-b pb-2 mb-6 text-sm font-medium">
            <Tabs.Trigger 
              value="general" 
              className="px-4 py-2 border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 transition-colors"
            >
              üìñ H∆∞·ªõng d·∫´n t·ªïng qu√°t
            </Tabs.Trigger>
            <Tabs.Trigger 
              value="detailed" 
              className="px-4 py-2 border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 transition-colors"
            >
              üìã H∆∞·ªõng d·∫´n chi ti·∫øt
            </Tabs.Trigger>
          </Tabs.List>

          {/* Tab 1: T·ªïng qu√°t */}
          <Tabs.Content value="general" className="space-y-6">
            <div className="grid gap-6">
              {getGeneralInstructions().map((instruction, index) => (
                <Card key={index} className="border-l-4 border-l-blue-500">
                  <CardHeader className="pb-3">
                    <CardTitle className="flex items-center gap-2 text-lg">
                      {instruction.icon}
                      {instruction.title}
                    </CardTitle>
                    <CardDescription>{instruction.description}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ol className="list-decimal list-inside space-y-2">
                      {instruction.steps.map((step, stepIndex) => (
                        <li key={stepIndex} className="text-sm text-gray-700 leading-relaxed">
                          {step}
                        </li>
                      ))}
                    </ol>
                  </CardContent>
                </Card>
              ))}
              
              {/* General Tips */}
              <Card className="bg-blue-50 border-blue-200">
                <CardHeader className="pb-3">
                  <CardTitle className="flex items-center gap-2 text-lg text-blue-800">
                    üí° M·∫πo s·ª≠ d·ª•ng chung
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc list-inside space-y-1 text-sm text-blue-700">
                    <li>S·ª≠ d·ª•ng ph√≠m t·∫Øt Ctrl+F ƒë·ªÉ t√¨m ki·∫øm nhanh tr√™n trang</li>
                    <li>Click v√†o ti√™u ƒë·ªÅ c·ªôt ƒë·ªÉ s·∫Øp x·∫øp d·ªØ li·ªáu</li>
                    <li>D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t realtime khi c√≥ thay ƒë·ªïi</li>
                    <li>Ki·ªÉm tra quy·ªÅn truy c·∫≠p n·∫øu kh√¥ng th·∫•y m·ªôt s·ªë ch·ª©c nƒÉng</li>
                    <li>S·ª≠ d·ª•ng &quot;L∆∞u & Tho√°t&quot; ƒë·ªÉ quay v·ªÅ danh s√°ch sau khi l∆∞u</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </Tabs.Content>

          {/* Tab 2: Chi ti·∫øt */}
          <Tabs.Content value="detailed" className="space-y-8">
            <div className="grid gap-8">
              {filteredDetailedInstructions.map((instruction, index) => (
                <Card key={index} className="border-l-4 border-l-green-500">
                  <CardHeader className="pb-4">
                    <CardTitle className="flex items-center gap-3 text-xl">
                      {operationIcons[instruction.operation]}
                      {instruction.title}
                    </CardTitle>
                    <CardDescription className="text-base">{instruction.description}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* Form Fields Section */}
                    {instruction.formFields && instruction.formFields.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold mb-4 text-gray-800">üìã C√°c tr∆∞·ªùng trong form:</h4>
                        <div className="grid gap-4">
                          {instruction.formFields.map((field, fieldIndex) => (
                            <div key={fieldIndex} className="border rounded-lg p-4 bg-gray-50">
                              <div className="flex items-center gap-3 mb-3">
                                <span className="text-lg">{getFieldTypeIcon(field.type)}</span>
                                <h5 className="font-medium text-gray-900">{field.label}</h5>
                                {field.required && (
                                  <Badge variant="destructive" className="text-xs">B·∫Øt bu·ªôc</Badge>
                                )}
                                <Badge variant="outline" className="text-xs">{field.type}</Badge>
                              </div>
                              
                              {field.description && (
                                <p className="text-sm text-gray-600 mb-2">{field.description}</p>
                              )}

                              {field.placeholder && (
                                <div className="mb-2">
                                  <p className="text-sm font-medium text-gray-700 mb-1">Placeholder:</p>
                                  <code className="text-sm bg-gray-100 px-2 py-1 rounded">{field.placeholder}</code>
                                </div>
                              )}
                              
                              {field.validation && (
                                <div className="mb-2">
                                  <p className="text-sm font-medium text-gray-700 mb-1">Validation:</p>
                                  <ul className="text-sm text-gray-600 space-y-1">
                                    {field.validation.rules.map((rule, ruleIndex) => (
                                      <li key={ruleIndex} className="flex items-start gap-2">
                                        <AlertCircle className="h-3 w-3 text-amber-500 mt-0.5 flex-shrink-0" />
                                        {rule}
                                      </li>
                                    ))}
                                  </ul>
                                  
                                  {field.validation.examples && field.validation.examples.length > 0 && (
                                    <div className="mt-2">
                                      <p className="text-sm font-medium text-gray-700 mb-1">V√≠ d·ª• h·ª£p l·ªá:</p>
                                      <div className="flex flex-wrap gap-1">
                                        {field.validation.examples.map((example, exampleIndex) => (
                                          <code key={exampleIndex} className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                                            {example}
                                          </code>
                                        ))}
                                      </div>
                                    </div>
                                  )}
                                </div>
                              )}
                              
                              {field.options && field.options.length > 0 && (
                                <div className="mb-2">
                                  <p className="text-sm font-medium text-gray-700 mb-1">T√πy ch·ªçn:</p>
                                  <div className="flex flex-wrap gap-1">
                                    {field.options.map((option, optionIndex) => (
                                      <Badge key={optionIndex} variant="secondary" className="text-xs">
                                        {option}
                                      </Badge>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Steps Section */}
                    <div>
                      <h4 className="text-lg font-semibold mb-4 text-gray-800">üî¢ C√°c b∆∞·ªõc th·ª±c hi·ªán:</h4>
                      <ol className="list-decimal list-inside space-y-3">
                        {instruction.steps.map((step, stepIndex) => (
                          <li key={stepIndex} className="text-sm text-gray-700 leading-relaxed pl-2">
                            {step}
                          </li>
                        ))}
                      </ol>
                    </div>

                    {/* Tips Section */}
                    {instruction.tips && instruction.tips.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold mb-4 text-green-800">üí° M·∫πo h·ªØu √≠ch:</h4>
                        <ul className="space-y-2">
                          {instruction.tips.map((tip, tipIndex) => (
                            <li key={tipIndex} className="flex items-start gap-2 text-sm text-green-700">
                              <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                              {tip}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Warnings Section */}
                    {instruction.warnings && instruction.warnings.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold mb-4 text-red-800">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h4>
                        <ul className="space-y-2">
                          {instruction.warnings.map((warning, warningIndex) => (
                            <li key={warningIndex} className="flex items-start gap-2 text-sm text-red-700">
                              <AlertCircle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
                              {warning}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Additional Notes Section */}
                    {instruction.additionalNotes && instruction.additionalNotes.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold mb-4 text-blue-800">üìù Ghi ch√∫ th√™m:</h4>
                        <ul className="space-y-2">
                          {instruction.additionalNotes.map((note, noteIndex) => (
                            <li key={noteIndex} className="flex items-start gap-2 text-sm text-blue-700">
                              <span className="text-blue-500 mt-0.5">‚Ä¢</span>
                              {note}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
              
              {/* Additional General Tips for Detailed Tab */}
              <Card className="bg-blue-50 border-blue-200">
                <CardHeader className="pb-3">
                  <CardTitle className="flex items-center gap-2 text-lg text-blue-800">
                    üéØ L∆∞u √Ω khi s·ª≠ d·ª•ng form
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc list-inside space-y-1 text-sm text-blue-700">
                    <li>Ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi l∆∞u</li>
                    <li>C√°c tr∆∞·ªùng c√≥ d·∫•u (*) l√† b·∫Øt bu·ªôc ph·∫£i ƒëi·ªÅn</li>
                    <li>N·∫øu g·∫∑p l·ªói validation, ƒë·ªçc k·ªπ th√¥ng b√°o l·ªói</li>
                    <li>S·ª≠ d·ª•ng Ctrl+S ƒë·ªÉ l∆∞u nhanh trong form</li>
                    <li>Li√™n h·ªá admin n·∫øu c·∫ßn h·ªó tr·ª£ th√™m</li>
                    <li>D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c validate realtime khi nh·∫≠p</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </Tabs.Content>
        </Tabs.Root>
      </DialogContent>
    </Dialog>
  );
} 