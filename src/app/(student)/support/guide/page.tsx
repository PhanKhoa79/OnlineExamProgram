'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { 
  BookOpen, 
  Video, 
  Download, 
  Search, 
  PlayCircle,
  FileText,
  Clock,
  CheckCircle,
  ArrowRight,
  Star,
  HelpCircle,
  Lightbulb,
  Target,
  Shield,
  BarChart3
} from 'lucide-react';
import { usePageTitle } from '@/hooks/usePageTitle';

export default function GuidePage() {
  usePageTitle('H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng');
  const [searchTerm, setSearchTerm] = useState('');

  const guideCategories = [
    {
      id: 'getting-started',
      title: 'B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng',
      description: 'H∆∞·ªõng d·∫´n c∆° b·∫£n cho ng∆∞·ªùi m·ªõi',
      icon: <Target className="w-6 h-6" />,
      color: 'from-blue-500 to-cyan-500',
      articles: [
        { title: 'T·∫°o t√†i kho·∫£n v√† ƒëƒÉng nh·∫≠p', duration: '5 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Thi·∫øt l·∫≠p h·ªì s∆° c√° nh√¢n', duration: '3 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Tham gia l·ªõp h·ªçc', duration: '4 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'L√†m quen v·ªõi giao di·ªán', duration: '10 ph√∫t', difficulty: 'D·ªÖ' }
      ]
    },
    {
      id: 'taking-exams',
      title: 'Tham gia thi',
      description: 'C√°ch th·ª©c thi tr·∫Øc nghi·ªám hi·ªáu qu·∫£',
      icon: <FileText className="w-6 h-6" />,
      color: 'from-green-500 to-emerald-500',
      articles: [
        { title: 'C√°ch l√†m b√†i thi ch√≠nh th·ª©c', duration: '8 ph√∫t', difficulty: 'Trung b√¨nh' },
        { title: 'L√†m b√†i thi th·ª≠ ƒë·ªÉ luy·ªán t·∫≠p', duration: '6 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'S·ª≠ d·ª•ng t√≠nh nƒÉng ƒë√°nh d·∫•u c√¢u h·ªèi', duration: '4 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Qu·∫£n l√Ω th·ªùi gian thi hi·ªáu qu·∫£', duration: '12 ph√∫t', difficulty: 'Kh√≥' }
      ]
    },
    {
      id: 'results-analysis',
      title: 'Xem k·∫øt qu·∫£ & Ph√¢n t√≠ch',
      description: 'Hi·ªÉu v√† c·∫£i thi·ªán k·∫øt qu·∫£ h·ªçc t·∫≠p',
      icon: <BarChart3 className="w-6 h-6" />,
      color: 'from-purple-500 to-indigo-500',
      articles: [
        { title: 'Xem chi ti·∫øt k·∫øt qu·∫£ b√†i thi', duration: '7 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu', duration: '15 ph√∫t', difficulty: 'Trung b√¨nh' },
        { title: 'Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p', duration: '10 ph√∫t', difficulty: 'Trung b√¨nh' },
        { title: 'So s√°nh k·∫øt qu·∫£ v·ªõi b·∫°n c√πng l·ªõp', duration: '8 ph√∫t', difficulty: 'D·ªÖ' }
      ]
    },
    {
      id: 'account-security',
      title: 'T√†i kho·∫£n & B·∫£o m·∫≠t',
      description: 'B·∫£o v·ªá v√† qu·∫£n l√Ω t√†i kho·∫£n',
      icon: <Shield className="w-6 h-6" />,
      color: 'from-red-500 to-pink-500',
      articles: [
        { title: 'ƒê·ªïi m·∫≠t kh·∫©u v√† b·∫£o m·∫≠t t√†i kho·∫£n', duration: '6 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Xem l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p', duration: '4 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n', duration: '5 ph√∫t', difficulty: 'D·ªÖ' },
        { title: 'Kh√¥i ph·ª•c t√†i kho·∫£n b·ªã kh√≥a', duration: '10 ph√∫t', difficulty: 'Trung b√¨nh' }
      ]
    }
  ];

  const videoTutorials = [
    {
      title: 'H∆∞·ªõng d·∫´n t·ªïng quan h·ªá th·ªëng',
      description: 'Video gi·ªõi thi·ªáu to√†n b·ªô t√≠nh nƒÉng c·ªßa MegaStar Online',
      duration: '15:30',
      views: '12,450',
      thumbnail: 'üéØ'
    },
    {
      title: 'C√°ch l√†m b√†i thi hi·ªáu qu·∫£',
      description: 'Nh·ªØng m·∫πo v√† th·ªß thu·∫≠t ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm cao trong b√†i thi',
      duration: '8:45',
      views: '8,230',
      thumbnail: 'üìù'
    },
    {
      title: 'Ph√¢n t√≠ch k·∫øt qu·∫£ chi ti·∫øt',
      description: 'C√°ch ƒë·ªçc hi·ªÉu v√† s·ª≠ d·ª•ng b√°o c√°o k·∫øt qu·∫£ ƒë·ªÉ c·∫£i thi·ªán',
      duration: '12:20',
      views: '6,890',
      thumbnail: 'üìä'
    }
  ];

  const quickTips = [
    {
      title: 'S·ª≠ d·ª•ng ph√≠m t·∫Øt',
      description: 'Space: Ch·ªçn/b·ªè ch·ªçn, Tab: Chuy·ªÉn c√¢u ti·∫øp theo',
      icon: <Lightbulb className="w-5 h-5" />
    },
    {
      title: 'ƒê√°nh d·∫•u c√¢u kh√≥',
      description: 'Click v√†o bi·ªÉu t∆∞·ª£ng d·∫•u sao ƒë·ªÉ ƒë√°nh d·∫•u c√¢u c·∫ßn xem l·∫°i',
      icon: <Star className="w-5 h-5" />
    },
    {
      title: 'Ki·ªÉm tra k·∫øt n·ªëi',
      description: 'ƒê·∫£m b·∫£o internet ·ªïn ƒë·ªãnh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thi',
      icon: <CheckCircle className="w-5 h-5" />
    }
  ];

  const faqItems = [
    {
      question: 'T√¥i qu√™n m·∫≠t kh·∫©u, l√†m sao ƒë·ªÉ l·∫•y l·∫°i?',
      answer: 'B·∫°n c√≥ th·ªÉ click v√†o "Qu√™n m·∫≠t kh·∫©u" ·ªü trang ƒëƒÉng nh·∫≠p, sau ƒë√≥ nh·∫≠p email ƒë·ªÉ nh·∫≠n link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.'
    },
    {
      question: 'B√†i thi b·ªã gi√°n ƒëo·∫°n do m·∫•t k·∫øt n·ªëi, t√¥i c√≥ th·ªÉ ti·∫øp t·ª•c kh√¥ng?',
      answer: 'C√≥, h·ªá th·ªëng t·ª± ƒë·ªông l∆∞u ti·∫øn ƒë·ªô. B·∫°n ch·ªâ c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i v√† ti·∫øp t·ª•c t·ª´ c√¢u h·ªèi cu·ªëi c√πng ƒë√£ tr·∫£ l·ªùi.'
    },
    {
      question: 'L√†m sao ƒë·ªÉ xem l·∫°i ƒë√°p √°n sau khi thi?',
      answer: 'V√†o m·ª•c "K·∫øt qu·∫£" > "L·ªãch s·ª≠ thi", ch·ªçn b√†i thi mu·ªën xem v√† click "Xem chi ti·∫øt" ƒë·ªÉ th·∫•y ƒë√°p √°n ƒë√∫ng.'
    },
    {
      question: 'T√¥i c√≥ th·ªÉ l√†m l·∫°i b√†i thi th·ª≠ kh√¥ng?',
      answer: 'C√≥, b√†i thi th·ª≠ c√≥ th·ªÉ l√†m kh√¥ng gi·ªõi h·∫°n s·ªë l·∫ßn. B√†i thi ch√≠nh th·ª©c ch·ªâ l√†m ƒë∆∞·ª£c 1 l·∫ßn duy nh·∫•t.'
    },
    {
      question: 'L√†m sao ƒë·ªÉ tham gia l·ªõp h·ªçc c·ªßa gi√°o vi√™n?',
      answer: 'Gi√°o vi√™n s·∫Ω cung c·∫•p m√£ l·ªõp h·ªçc. B·∫°n v√†o "Trang ch·ªß" > "Tham gia l·ªõp" v√† nh·∫≠p m√£ ƒë∆∞·ª£c cung c·∫•p.'
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'D·ªÖ': return 'bg-green-100 text-green-700 border-green-200';
      case 'Trung b√¨nh': return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'Kh√≥': return 'bg-red-100 text-red-700 border-red-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  const filteredCategories = guideCategories.filter(category =>
    searchTerm === '' || 
    category.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    category.articles.some(article => 
      article.title.toLowerCase().includes(searchTerm.toLowerCase())
    )
  );

  return (
    <div className="container mx-auto px-4 py-8 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto">
          <BookOpen className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
          T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng MegaStar Online m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t
        </p>
      </div>

      {/* Search */}
      <div className="max-w-md mx-auto relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
        <Input
          placeholder="T√¨m ki·∫øm h∆∞·ªõng d·∫´n..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10 h-12 text-base"
        />
      </div>

      {/* Quick Tips */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {quickTips.map((tip, index) => (
          <Card key={index} className="border-l-4 border-blue-500 bg-blue-50/50 dark:bg-blue-900/10">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/50 rounded-lg flex items-center justify-center mt-0.5">
                  {tip.icon}
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 dark:text-white text-sm">
                    {tip.title}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 text-xs mt-1">
                    {tip.description}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Main Content Tabs */}
      <Tabs defaultValue="guides" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="guides" className="flex items-center gap-2">
            <BookOpen className="w-4 h-4" />
            H∆∞·ªõng d·∫´n
          </TabsTrigger>
          <TabsTrigger value="videos" className="flex items-center gap-2">
            <Video className="w-4 h-4" />
            Video h∆∞·ªõng d·∫´n
          </TabsTrigger>
          <TabsTrigger value="faq" className="flex items-center gap-2">
            <HelpCircle className="w-4 h-4" />
            FAQ
          </TabsTrigger>
        </TabsList>

        {/* Guides Tab */}
        <TabsContent value="guides" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredCategories.map((category) => (
              <Card key={category.id} className="hover:shadow-lg transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center gap-4">
                    <div className={`w-12 h-12 bg-gradient-to-br ${category.color} rounded-xl flex items-center justify-center`}>
                      <div className="text-white">
                        {category.icon}
                      </div>
                    </div>
                    <div>
                      <CardTitle className="text-lg">{category.title}</CardTitle>
                      <CardDescription>{category.description}</CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  {category.articles.map((article, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors cursor-pointer">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900 dark:text-white text-sm">
                          {article.title}
                        </h4>
                        <div className="flex items-center gap-3 mt-1">
                          <div className="flex items-center gap-1 text-xs text-gray-500">
                            <Clock className="w-3 h-3" />
                            {article.duration}
                          </div>
                          <Badge variant="outline" className={`text-xs ${getDifficultyColor(article.difficulty)}`}>
                            {article.difficulty}
                          </Badge>
                        </div>
                      </div>
                      <ArrowRight className="w-4 h-4 text-gray-400" />
                    </div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Videos Tab */}
        <TabsContent value="videos" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {videoTutorials.map((video, index) => (
              <Card key={index} className="hover:shadow-lg transition-all duration-300 cursor-pointer group">
                <div className="relative">
                  <div className="aspect-video bg-gradient-to-br from-blue-500 to-indigo-600 rounded-t-lg flex items-center justify-center text-6xl">
                    {video.thumbnail}
                  </div>
                  <div className="absolute inset-0 bg-black/20 rounded-t-lg flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                    <div className="w-16 h-16 bg-white/90 rounded-full flex items-center justify-center">
                      <PlayCircle className="w-8 h-8 text-blue-600" />
                    </div>
                  </div>
                  <Badge className="absolute top-2 right-2 bg-black/70 text-white">
                    {video.duration}
                  </Badge>
                </div>
                <CardContent className="p-4">
                  <h3 className="font-semibold text-gray-900 dark:text-white mb-2">
                    {video.title}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 text-sm mb-3">
                    {video.description}
                  </p>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{video.views} l∆∞·ª£t xem</span>
                    <div className="flex items-center gap-1">
                      <PlayCircle className="w-3 h-3" />
                      Xem ngay
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* FAQ Tab */}
        <TabsContent value="faq" className="space-y-6">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                C√¢u h·ªèi th∆∞·ªùng g·∫∑p
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                T√¨m c√¢u tr·∫£ l·ªùi nhanh cho nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn
              </p>
            </div>
            
            <Accordion type="single" collapsible className="space-y-4">
              {faqItems.map((item, index) => (
                <AccordionItem 
                  key={index} 
                  value={`item-${index}`}
                  className="border border-gray-200 dark:border-gray-700 rounded-lg px-4"
                >
                  <AccordionTrigger className="text-left hover:no-underline">
                    <span className="font-medium text-gray-900 dark:text-white">
                      {item.question}
                    </span>
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 dark:text-gray-400 pb-4">
                    {item.answer}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        </TabsContent>
      </Tabs>

      {/* Download Section */}
      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
                <Download className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 dark:text-white">
                  T√†i li·ªáu h∆∞·ªõng d·∫´n PDF
                </h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  T·∫£i v·ªÅ b·∫£n h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·ªÉ ƒë·ªçc offline
                </p>
              </div>
            </div>
            <Button className="bg-blue-500 hover:bg-blue-600">
              <Download className="w-4 h-4 mr-2" />
              T·∫£i v·ªÅ
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 